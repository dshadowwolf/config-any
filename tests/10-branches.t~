var tap = require("tap"),
    test = tap.test,
    plan = tap.plan,
    glob = require("glob"),
    config = require('../lib/config');

test("Check to make sure proper errors are returned", function(t) {
	    t.plan(4)
	    t.throws(config.load_files(), "No files specified!", "load_files expects args")
	    t.throws(config.load_files({}), "No files specified!", "load_files expects files")
	    t.throws(config.load_stems(), "No files specified!", "load_stems expects args")
	    t.throws(config.load_stems({}), "No files specified!", "load_stems expects stems")
	    t.end()
});

var testfiles = glob.sync("tests/conf/test.*");
var astems = testfiles.map(function(d) { d.match(/(.*)\.(?:\w+)$)[1] }).filter( function(e,p,s) { return s.indexOf(e) == p; });

test("Test various loading scenarios", function(t) {
	   t.plan(5)
	   t.ok( config.load_files( { files: testfiles, use_ext: false } ), "use_ext false works" )
	   function filt(data) { return; }
	   t.ok( config.load_files( { files: testfiles, use_ext: true } ), "use_ext true works" )
	   t.ok( config.load_files( { files: testfiles, use_ext: true, filter: filt } ), "filter works" )
	   t.throws( config.load_files( { files: testfiles, use_ext: true, filter: function(data) { throw new Error(); } } ), undefined, "filter breaks" )
	   t.ok( config.load_stems( { stems: astems, use_ext: true } ), "load_stems with stems works" );
	   t.end()
});
